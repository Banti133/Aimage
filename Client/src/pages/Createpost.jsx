import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

import { preview } from '../assets';
import { getRandomPrompt } from '../utils';
import { Formfield, Loader } from '../components';
import { useAuth0 } from "@auth0/auth0-react";


const CreatePost = () => {
  const [showProfile, setShowProfile] = useState(false);
  const { user, isAuthenticated} = useAuth0();

  const navigate = useNavigate();

  const [form, setForm] = useState({
    name: '',
    prompt: '',
    photo: '',
  });

  const [generatingImg, setGeneratingImg] = useState(false);
  const [loading, setLoading] = useState(false);

  const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });
  const handleShowProfile = () => {
    setShowProfile(!showProfile)
  };

  const handleSurpriseMe = () => {
    const randomPrompt = getRandomPrompt(form.prompt);
    setForm({ ...form, prompt: randomPrompt });
  };

  const handleShowDetails = (e) => {
    e.preventDefault();
    setShow(show);
  };

  const generateImage = async () => {
    if (form.prompt) {
      try {
        setGeneratingImg(true);
        const response = await fetch('http://localhost:4000/api/v1/dalle', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            prompt: form.prompt,
          }),
        });

        const data = await response.json();
        setForm({ ...form, photo: `data:image/jpeg;base64,${data.photo}` });
      } catch (err) {
        alert(err);
      } finally {
        setGeneratingImg(false);
      }
    } else {
      alert('Please provide proper prompt');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (form.prompt && form.photo) {
      setLoading(true);
      try {
        const response = await fetch('http://localhost:4000/api/v1/post', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ ...form }),
        });

        await response.json();
        alert('Success');
        navigate('/');
      } catch (err) {
        alert(err);
      } finally {
        setLoading(false);
      }
    } else {
      alert('Please generate an image with proper details');
    }
  };

  return (
    <div className='flex flex-row'>
    <section className="max-w-7xl mx-40">
      <div>
        <h1 className="font-extrabold text-[#ebecf0] text-[50px]">AImage Creation</h1>
        <p className="mt-2 text-[#39e7ea] text-[18px] max-w-[600px]">Create a collection of imaginative and visually stunning images generated by AImage and share with the community.</p>
      </div>
      <div className='flex flex-row'>
      <div>
      <form className="mt-16 max-w-3xl" onSubmit={handleSubmit}>
        <div className="flex flex-col gap-5">
          <Formfield
            labelName="Your Name"
            type="text"
            name="name"
            placeholder="Ex., Ram Kumar"
            value={form.name}
            handleChange={handleChange}
          />

          <Formfield
            labelName="Prompt"
            type="text"
            name="prompt"
            placeholder="An Impressionist oil painting of sunflowers in a purple vaseâ€¦"
            value={form.prompt}
            handleChange={handleChange}
            isSurpriseMe
            handleSurpriseMe={handleSurpriseMe}
          />

          <div className="relative bg-gray-50 border border-gray-300 text-gray-900 text-lg  rounded-lg focus:ring-blue-500 focus:border-blue-500 w-64 p-2 h-64 flex justify-center items-center">
            { form.photo ? (
              <img
                src={form.photo}
                alt={form.prompt}
                className="w-full h-full object-contain"
              />
            ) : (
              <img
                src={preview}
                alt="preview"
                className="w-9/12 h-9/12 object-contain opacity-40"
              />
            )}

            {generatingImg && (
              <div className="absolute inset-0 z-0 flex justify-center items-center bg-[rgba(0,0,0,0.5)] rounded-lg">
                <Loader />
              </div>
            )}
          </div>
        </div>

        <div className="mt-5 flex gap-5">
          <button
            type="button"
            onClick={generateImage}
            className=" text-white bg-green-600 font-medium rounded-md text-sm w-full sm:w-auto px-24 py-2.5 text-center"
          >
            {generatingImg ? 'Generating...' : 'Generate'}
          </button>
        </div>

        <div className="mt-10">
          <p className="mt-2 text-[#fbfcfd] text-[14px]">** Once you have created the image you want, you can share it with others in the community **</p>
          <button
            type="submit"
            className="mt-3 text-white bg-[#3320dd] font-medium rounded-md text-sm w-full sm:w-auto px-52 py-2.5 text-center"
          >
            {loading ? 'Sharing...' : 'Share with the Community'}
          </button>
        </div>
      </form>
      </div>
      <div className='text-white px-10 '>
        
      </div>
      </div>
    </section>
    <section className='max-w-7xl mx-28'>
    <button className='bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded ring-2 ring-blue-500' onClick={handleShowProfile}>Profile Details</button>
            {showProfile && isAuthenticated && (
              <div>
                <br/>
                <img src={user.picture} className='rounded-full px-2 py-2'></img>
                <h2 className='font-bold'>User Name: {user.nickname}</h2>
                <h2 className='font-bold'>Profile Name: {user.name}</h2>
                <p className='font-bold'>Email Address: {user.email}</p>
                <h2 className='font-bold'>Last Updated: {user.updated_at.split('T')[0]}</h2>
              </div>
            )}
    
    </section>
    </div>
  );
};

export default CreatePost;